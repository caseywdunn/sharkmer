"""
Examine sPCR across a panel of genomes
"""
configfile: "config.yaml"

thousand_reads = [1, 10, 50, 100, 500, 5000, 10000]

rule all:
    input:
        expand("output/{sample}_{k_reads}k.histo", k_reads = thousand_reads, sample = config["sample"]),
        expand("fastqc/{sample}_fastqc.html", sample = config["sample"]),

rule download_reads:
    params:
        reads = lambda wildcards: [x for x in config["sample"][wildcards.sample]["reads"]]
    output:
        reads_temp = directory(temp("data/{sample}_reads_downloaded")),    
        reads = "data/{sample}.fastq",
    shell:
        """
        fasterq-dump --split-files -O data/{wildcards.sample}_reads_downloaded {params.reads}
        cat data/{wildcards.sample}_reads_downloaded/*.fastq > {output.reads}
        """

rule sharkmer_pcr:
    input:
        reads = "data/{sample}.fastq"
    output:
        histo = "output/{sample}_{k_reads}k.histo",
        stats = "output/{sample}_{k_reads}k.stats",
        final_histo = "output/{sample}_{k_reads}k.final.histo",
    params:
        k_reads = lambda wildcards: wildcards.k_reads,
        n_reads = lambda wildcards: int(wildcards.k_reads) * 1000,
        sample = lambda wildcards: wildcards.sample,
        arguments = lambda wildcards: config["sample"][wildcards.sample]["arguments"],
        verbosity = 0,
    threads: 8
    benchmark: "benchmarks/sharkmer.{sample}.{k_reads}k.benchmark.txt"
    log: "logs/sharkmer.{sample}.{k_reads}k.log"
    shell:
        """
        ../sharkmer/target/release/sharkmer -k 31 -t {threads} --max-reads {params.n_reads} -o output -s {params.sample}_{params.k_reads}k --verbosity {params.verbosity} {params.arguments} {input.reads} > {log} 2>&1
        """

rule fastqc:
    input:
        R1 = "data/{sample}.fastq",
    output:
        html_R1 = "fastqc/{sample}_fastqc.html",
        zip_R1 = temp("fastqc/{sample}_fastqc.zip"),
    params:
        outdir = "fastqc"
    log: "logs/fastqc/fastqc_{sample}.log"
    priority: 15
    shell:
        """
        fastqc -o {params.outdir} {input.R1} 2> {log}
        """
